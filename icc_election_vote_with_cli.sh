#!/usr/bin/env bash

# Based on example from previous vote: https://gist.github.com/Jimbo4350/24eec6168dc5b139826971e13973e9d8

# Example usage: ./create-vote.sh '["candidate1", "candidate2", "candidate3"]' test-directory  
# The first argument is valid json array generated by vote UI, the second argument is the directory to store the generated files.

# Requires:
# 1. cardano-cli: https://github.com/input-output-hk/cardano-cli
# 2. cardano-address: https://github.com/IntersectMBO/cardano-addresses/releases/tag/3.12.0
# 2. Wallet seed on disk at wallet.seed


# Check if argument is provided
if [ $# -eq 0 ]
then
    echo "No arguments supplied. Please provide a vote option."
    exit 1
fi

# Validate the input
selection=$1
# Ensure selection is properly formatted JSON array of strings
#if [[ ! "$selection" =~ ^\[(\"[^\"]*\",)*(\"[^\"]*\")\]$ ]]; then
#    echo "Error: selection must be a valid JSON array of strings."
#    exit 1
#fi

dir=$2

# Get current timestamp in milliseconds
timestamp=$(date +%s%3N)

# Create JSON object
inner_json=$(cat <<EOF
{
    "params": $selection,
    "timestamp": $timestamp
}
EOF
)

# Wrap the inner JSON object with the "674" key
json_output=$(cat <<EOF
{
    "674": $inner_json
}
EOF
)
metadatajson="$dir"/vote.json
# Output to a file
echo "$json_output" > "$metadatajson"


# Derivation path info: 
# https://github.com/uniVocity/cardano-tutorials/blob/master/cardano-addresses.md
# https://github.com/IntersectMBO/cardano-addresses

stakederivationpath=1852H/1815H/0H/2/0
walletseedfile=wallet.seed
walletstakeskey=${dir}/walletstake.skey
walletseedrootkey=${dir}/wallet.rootskey
extendedwalletstakevkey=${dir}/extended-walletstake.vkey
walletstakevkey=${dir}/cli-compatiable-walletstake.vkey
convertedwalletstakeskey=${dir}/cli-compatibale-walletstake.skey

mkdir -p "${dir}"

# 2) Generate root private key:
(cardano-address key from-recovery-phrase Shelley < "$walletseedfile") > "$walletseedrootkey"

# 3) Generate a stake signing key from a root private key
(cardano-address key child ${stakederivationpath} < "$walletseedrootkey") \
  > "$walletstakeskey"

# 5) Convert to cardano-cli text envelope format:
cardano-cli key convert-cardano-address-key \
  --shelley-stake-key \
  --signing-key-file "$walletstakeskey" \
  --out-file "$convertedwalletstakeskey"

cardano-cli key verification-key \
  --signing-key-file "$convertedwalletstakeskey" \
  --verification-key-file "$extendedwalletstakevkey"

cardano-cli key non-extended-key \
    --extended-verification-key-file "$extendedwalletstakevkey" \
    --verification-key-file "$walletstakevkey"


# Below we create a tx signing with your wallet stake key
dummytxin="646069e52678e8f121209cc38ab60a4197fd8f18dff960b607a27cbdefe2def7#1337"
txbodyfile=$dir/txbody.raw
txsignedfile=$dir/tx.signed
cardano-cli babbage transaction build-raw \
 --tx-in ${dummytxin} \
 --fee 0 \
 --metadata-json-file "$metadatajson" \
 --out-file "$txbodyfile"

cardano-cli babbage transaction sign \
  --tx-body-file "$txbodyfile" \
  --signing-key-file "$convertedwalletstakeskey" \
  --out-file "$txsignedfile"

signedhexonlytx=$dir/tx.signed.hex
jq -r '.cborHex' "$txsignedfile" > "$signedhexonlytx"

echo "Signed tx (hex only) at: $signedhexonlytx"
echo "Voted: $selection"